import numpy as np
import matplotlib.pyplot as plt
import random
from datetime import datetime, timedelta
import logging

# Logging Setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- Time Manager ---
class TimeManager:
    def __init__(self, start_time=0, time_unit='seconds'):
        """
        Manage simulation time scaling and progression.
        """
        self.current_time = start_time
        self.time_unit = time_unit
        self.time_conversion = self.get_time_conversion_factor()

    def get_time_conversion_factor(self):
        conversion_factors = {
            'seconds': 1, 'minutes': 60, 'hours': 3600,
            'days': 86400, 'years': 3.154e+7, 'centuries': 3.154e+9
        }
        return conversion_factors.get(self.time_unit, 1)

    def advance_time(self, delta):
        self.current_time += delta * self.time_conversion

# --- QCAD Model ---
class QCADModel:
    def __init__(self, L=5, P=0.05, A=1.0):
        """
        Quantum Convergence and Divergence Model
        """
        self.L = L
        self.P = P
        self.A = A

    def compute(self, t):
        return sum(self.A * (np.exp(-n * self.P * t) + np.exp(n * self.P * t)) for n in range(1, self.L + 1))

# --- Environment ---
class Environment:
    def __init__(self):
        self.resources = {'food': 1000, 'water': 1000, 'energy': 1000}
        self.hazards = []

    def apply_hazards(self):
        if random.random() < 0.1:
            hazard = random.choice(['earthquake', 'flood', 'fire'])
            logging.warning(f"Environmental Hazard: {hazard} occurred!")
            self.hazards.append(hazard)
            for key in self.resources.keys():
                self.resources[key] = max(0, self.resources[key] - random.randint(50, 200))

    def update_resources(self, delta=10):
        for key in self.resources:
            self.resources[key] += delta

# --- Entity (Avatar) ---
class Entity:
    def __init__(self, name, role, attributes=None):
        self.name = name
        self.role = role
        self.attributes = attributes if attributes else {'energy': 100, 'happiness': 100}
        self.history = []
        self.q_table = {}  # For Q-learning

    def make_decision(self, qcad_value, environment):
        """
        Simulate decision-making with basic Q-learning.
        """
        # Simplified Q-learning - Replace with more sophisticated implementation
        possible_actions = ["explore", "conserve", "rest"]
        state = (environment.resources['food'], environment.resources['water'])
        if state not in self.q_table:
            self.q_table[state] = {action: 0 for action in possible_actions}

        # Choose action based on Q-values (with exploration)
        if random.random() < 0.1:  # Exploration rate
            action = random.choice(possible_actions)
        else:
            action = max(self.q_table[state], key=self.q_table[state].get)

        # Execute action and update Q-table
        if action == "explore":
            reward = 0.1  # Reward for exploration
        elif action == "conserve":
            reward = -0.05  # Penalty for conserving if resources are abundant
        elif action == "rest":
            reward = -0.02  # Slight penalty for resting

        # Update Q-value
        self.q_table[state][action] = self.q_table[state][action] + 0.1 * (reward + 0.9 * max(self.q_table[state].values()) - self.q_table[state][action])

        # Update entity state
        if action == "explore":
            self.attributes['energy'] -= 5
        elif action == "rest":
            self.attributes['energy'] += 2

        self.history.append((datetime.now(), action))
        logging.info(f"{self.name} Decision: {action}, Energy: {self.attributes['energy']}")
        return action

# --- Celestial Body ---
class CelestialBody:
    def __init__(self, name, mass, position, velocity):
        self.name = name
        self.mass = mass
        self.position = np.array(position, dtype=float)
        self.velocity = np.array(velocity, dtype=float)

    def compute_gravitational_force(self, other):
        G = 6.67430e-11
        r_vec = other.position - self.position
        distance = np.linalg.norm(r_vec)
        if distance == 0:
            raise ValueError("Collision detected.")
        force_magnitude = G * self.mass * other.mass / distance**2
        force_direction = r_vec / distance
        return force_magnitude * force_direction

# --- Universe Simulation ---
class Universe:
    def __init__(self, bodies, entities, qcad_model, environment, time_manager):
        self.bodies = bodies
        self.entities = entities
        self.qcad_model = qcad_model
        self.environment = environment
        self.time_manager = time_manager
        self.positions = []

    def update_celestial_positions(self, dt):
        """Simple Newtonian motion update."""
        for body in self.bodies:
            body.position += body.velocity * dt
            self.positions.append(body.position.copy())

    def run_simulation(self, total_time, dt):
        num_steps = int(total_time / dt)
        for step in range(num_steps):
            self.environment.apply_hazards()
            self.environment.update_resources()
            self.update_celestial_positions(dt)
            qcad_value = self.qcad_model.compute(self.time_manager.current_time)
            for entity in self.entities:
                entity.make_decision(qcad_value, self.environment)
            self.time_manager.advance_time(dt)
            if step % 10 == 0:
                logging.info(f"Simulation Step: {step}, Time: {self.time_manager.current_time}")

    def plot_trajectories(self):
        positions = np.array(self.positions)
        plt.plot(positions[:, 0], positions[:, 1], 'o-', label="Trajectory")
        plt.title("Celestial Body Trajectory")
        plt.xlabel("X Position (m)")
        plt.ylabel("Y Position (m)")
        plt.legend()
        plt.grid()
        plt.show()

# --- Main Execution ---
if __name__ == "__main__":
    # Initialize Components
    time_manager = TimeManager(start_time=0, time_unit="years")
    qcad_model = QCADModel(L=5, P=0.05, A=1.0)
    environment = Environment()

    # Define Celestial Bodies
    earth = CelestialBody("Earth", 5.972e24, [0, 0], [0, 0])
    mars = CelestialBody("Mars", 6.417e23, [227.9e9, 0], [0, 24.07e3])

    # Define Entities
    avatar_travis = Entity("Travis Avatar", "Avatar")
    lawyer = Entity("Lawyer Prototype", "Lawyer")
    doctor = Entity("Doctor Prototype", "Doctor")

    # Initialize Universe
    universe = Universe(
        bodies=[earth, mars],
        entities=[avatar_travis, lawyer, doctor],
        qcad_model=qcad_model,
        environment=environment,
        time_manager=time_manager
    )

    # Run Simulation
    logging.info("Starting Enhanced Simulation...")
    universe.run_simulation(total_time=10, dt=0.1)
    universe.plot_trajectories()

    # Final Results
    logging.info("\nFinal Resource Levels:")
