import math
import numpy as np
from qiskit import Aer
from qiskit.circuit import QuantumCircuit
from qiskit.visualization import plot_histogram
from qiskit.aer import AerSimulator
from qiskit.exceptions import QiskitError

# Nominal variance threshold and recursion depth settings
EPSILON = 1e-5  # Tolerance for nominal variance (close to whole numbers)
DELTA = 1e-7    # Convergence threshold for recursion stopping
MAX_RECURSION_DEPTH = 100  # Max depth for recursion to avoid infinite loops

# Quantum settings
SIMULATOR = AerSimulator()

class RecursiveExponentialGrowth:
    def __init__(self, x):
        self.x = self.adjust_for_nominal_variance(x)

    def adjust_for_nominal_variance(self, x):
        """Adjust x if it is within a small threshold of an integer."""
        if abs(x - round(x)) < EPSILON:
            return round(x)
        return x

    def recursive_exp(self, x, depth=1):
        """Recursive exponential function with depth control."""
        if depth > MAX_RECURSION_DEPTH:
            print(f"Max recursion depth reached with depth={depth}")
            return None
        
        # Stopping condition when the change in recursion is negligible
        prev = x
        next_val = x ** prev

        if abs(next_val - prev) < DELTA:
            return next_val
        else:
            return self.recursive_exp(next_val, depth + 1)

    def calculate(self):
        """Calculate the recursive exponential result."""
        result = self.recursive_exp(self.x)
        if result is None:
            print("Failed to converge or max recursion depth reached.")
            return None
        return result

class QuantumExponentialProcessor:
    def __init__(self, classical_result):
        self.classical_result = classical_result

    def create_quantum_circuit(self):
        """Create a simple quantum circuit for analysis."""
        try:
            circuit = QuantumCircuit(1)
            circuit.h(0)  # Hadamard gate to put qubit in superposition
            circuit.measure_all()  # Measure the qubit
            return circuit
        except QiskitError as e:
            print(f"Quantum circuit creation failed: {e}")
            return None

    def process_on_quantum(self):
        """Process the classical result using quantum computation."""
        try:
            circuit = self.create_quantum_circuit()
            if circuit is None:
                raise QiskitError("Quantum Circuit is None")
            
            job = SIMULATOR.run(circuit)
            result = job.result()
            counts = result.get_counts(circuit)
            return counts
        except QiskitError as e:
            print(f"Quantum processing failed: {e}")
            return None

class UnifiedProcessor:
    def __init__(self, x):
        self.classical_processor = RecursiveExponentialGrowth(x)
        self.quantum_processor = None

    def run(self):
        """Run the entire processing pipeline."""
        classical_result = self.classical_processor.calculate()
        if classical_result is None:
            print("Classical processing failed, halting.")
            return None
        
        print(f"Classical result: {classical_result}")

        # Initialize quantum processing with the classical result
        self.quantum_processor = QuantumExponentialProcessor(classical_result)
        quantum_result = self.quantum_processor.process_on_quantum()

        if quantum_result is None:
            print("Quantum processing failed.")
        else:
            print(f"Quantum result: {quantum_result}")
            plot_histogram(quantum_result)  # Visualize the quantum result

# Main execution
if __name__ == "__main__":
    x = float(input("Enter a value for recursive exponential calculation: "))
    unified_processor = UnifiedProcessor(x)
    unified_processor.run()
