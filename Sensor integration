import geopy
from geopy.distance import geodesic
import requests
import json
import datetime

# Sample class to represent real-world sensor input
class SensorInput:
    def __init__(self, sensor_id, data_type, data_value, location, timestamp):
        self.sensor_id = sensor_id
        self.data_type = data_type  # e.g., 'temperature', 'heart_rate'
        self.data_value = data_value
        self.location = location  # Tuple (latitude, longitude, elevation)
        self.timestamp = timestamp

# Function to feed sensor data into the avatar's system
def feed_sensor_data_to_avatar(avatar, sensor_data):
    # Extract sensor data attributes
    data_type = sensor_data.data_type
    data_value = sensor_data.data_value
    sensor_location = sensor_data.location
    timestamp = sensor_data.timestamp

    # Calculate geolocation distance between avatar and sensor
    avatar_location = (avatar.latitude, avatar.longitude, avatar.elevation)
    distance_to_sensor = geodesic(avatar_location, sensor_location[:2]).meters

    # Process sensor data based on avatar's proximity and the data type
    if distance_to_sensor < 100:  # Check if sensor is within 100 meters
        if data_type == 'temperature':
            avatar.adjust_for_temperature(data_value)
        elif data_type == 'heart_rate':
            avatar.adjust_for_biometric(data_value)
        # Additional data types can be handled here

    # Log sensor input processing
    print(f"Sensor data processed at {timestamp}: {data_type} = {data_value}")

# Example of feeding data from a temperature sensor to an avatar
sensor_data = SensorInput(
    sensor_id='sensor_001',
    data_type='temperature',
    data_value=95.0,  # Temperature in Fahrenheit
    location=(34.241, -117.286, 2000),  # Geolocation of sensor (latitude, longitude, elevation)
    timestamp=datetime.datetime.now()
)

# Assuming we have an avatar instance
feed_sensor_data_to_avatar(travis_avatar, sensor_data)
