from flask import Flask, request, jsonify
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

app = Flask(__name__)

# === Central Data Source for the Universe ===

class CentralDataSource:
    """
    Central data source serving as the core repository in Travis Raymond-Charlie Stone’s universe,
    accessible to all avatars for structured data collection and distribution.
    """
    
    def __init__(self):
        self.medical_data = {'symptoms': ['fever', 'cough', 'fatigue', 'headache'], 'diagnosis': [1, 0, 0, 1]}
        self.legal_data = {'case_factors': ['contract dispute', 'property damage', 'criminal offense', 'family law'], 'classification': [1, 0, 1, 1]}
        self.medical_df = pd.DataFrame(self.medical_data)
        self.legal_df = pd.DataFrame(self.legal_data)

    def get_medical_data(self):
        return self.medical_df

    def get_legal_data(self):
        return self.legal_df

    def update_medical_data(self, new_data):
        new_df = pd.DataFrame(new_data)
        self.medical_df = pd.concat([self.medical_df, new_df], ignore_index=True)

    def update_legal_data(self, new_data):
        new_df = pd.DataFrame(new_data)
        self.legal_df = pd.concat([self.legal_df, new_df], ignore_index=True)

# Instantiate the Central Data Source
central_data_source = CentralDataSource()

# === Base Avatar Class for All Avatars in the Universe ===

class BaseAvatar:
    """
    Base class for all avatars in Travis Raymond-Charlie Stone’s universe.
    Each avatar has access to the central data source and inherits basic methods.
    """
    def __init__(self, name, data_source):
        self.name = name
        self.data_source = data_source
        self.attributes = {}

    def add_attribute(self, key, value):
        """Add custom attributes to the avatar."""
        self.attributes[key] = value

    def get_data_summary(self):
        """Return a summary of data access from the central data source."""
        return {
            "medical_data_count": len(self.data_source.get_medical_data()),
            "legal_data_count": len(self.data_source.get_legal_data())
        }

# === Specialized Career Classes for Specific Roles ===

class DoctorCareer(BaseAvatar):
    """Doctor career for avatars, specialized in medical diagnosis."""
    
    def __init__(self, name, data_source):
        super().__init__(name, data_source)
        self.model = RandomForestClassifier()
        self.train_model()

    def train_model(self):
        medical_df = self.data_source.get_medical_data()
        X = pd.get_dummies(medical_df['symptoms'])
        y = medical_df['diagnosis']
        self.model.fit(X, y)

    def predict_diagnosis(self, symptoms):
        symptoms_encoded = pd.get_dummies(pd.DataFrame([symptoms])).reindex(columns=pd.get_dummies(self.data_source.get_medical_data()['symptoms']).columns, fill_value=0)
        prediction = self.model.predict(symptoms_encoded)
        return int(prediction[0])

class LawyerCareer(BaseAvatar):
    """Lawyer career for avatars, specialized in legal case classification."""
    
    def __init__(self, name, data_source):
        super().__init__(name, data_source)
        self.model = RandomForestClassifier()
        self.train_model()

    def train_model(self):
        legal_df = self.data_source.get_legal_data()
        X = pd.get_dummies(legal_df['case_factors'])
        y = legal_df['classification']
        self.model.fit(X, y)

    def classify_case(self, case_factors):
        case_factors_encoded = pd.get_dummies(pd.DataFrame([case_factors])).reindex(columns=pd.get_dummies(self.data_source.get_legal_data()['case_factors']).columns, fill_value=0)
        classification = self.model.predict(case_factors_encoded)
        return int(classification[0])

# === Avatar Registry to Manage and Populate the Universe with Career-Specific Avatars ===

class AvatarRegistry:
    """
    Registry to manage and populate all avatars in Travis Raymond-Charlie Stone’s universe.
    Supports dynamic creation of avatars with specific career roles.
    """
    
    def __init__(self):
        self.avatars = {}

    def create_avatar(self, name, career):
        """Dynamically create an avatar with a specified career and register it in the universe."""
        if career == 'Doctor':
            avatar = DoctorCareer(name, central_data_source)
        elif career == 'Lawyer':
            avatar = LawyerCareer(name, central_data_source)
        else:
            avatar = BaseAvatar(name, central_data_source)
        
        self.avatars[name] = avatar
        return avatar

    def get_avatar(self, name):
        """Retrieve an avatar by name."""
        return self.avatars.get(name)

# Instantiate the Avatar Registry
avatar_registry = AvatarRegistry()

# === Flask Endpoints for Interacting with the Universe and Career-Based Avatars ===

@app.route('/create_avatar', methods=['POST'])
def create_avatar():
    """Endpoint to create a new avatar with a specified career in the universe."""
    data = request.json
    name = data['name']
    career = data['career']
    avatar = avatar_registry.create_avatar(name, career)
    return jsonify({'message': f'Avatar {name} with career {career} created successfully'})

@app.route('/get_avatar_summary/<name>', methods=['GET'])
def get_avatar_summary(name):
    """Get data summary from a specific avatar's perspective."""
    avatar = avatar_registry.get_avatar(name)
    if avatar:
        return jsonify(avatar.get_data_summary())
    else:
        return jsonify({'message': 'Avatar not found'}), 404

@app.route('/predict_diagnosis', methods=['POST'])
def predict_diagnosis():
    """Endpoint for Doctor Career avatars to predict a medical diagnosis based on symptoms."""
    data = request.json
    avatar_name = data['avatar_name']
    symptoms = data['symptoms']
    avatar = avatar_registry.get_avatar(avatar_name)
    
    if isinstance(avatar, DoctorCareer):
        diagnosis = avatar.predict_diagnosis(symptoms)
        return jsonify({'diagnosis': diagnosis})
    else:
        return jsonify({'message': f'{avatar_name} is not a Doctor avatar'}), 400

@app.route('/classify_case', methods=['POST'])
def classify_case():
    """Endpoint for Lawyer Career avatars to classify a legal case based on case factors."""
    data = request.json
    avatar_name = data['avatar_name']
    case_factors = data['case_factors']
    avatar = avatar_registry.get_avatar(avatar_name)
    
    if isinstance(avatar, LawyerCareer):
        classification = avatar.classify_case(case_factors)
        return jsonify({'classification': classification})
    else:
        return jsonify({'message': f'{avatar_name} is not a Lawyer avatar'}), 400

@app.route('/feedback_diagnosis', methods=['POST'])
def feedback_diagnosis():
    """Provide feedback to update the Doctor avatar's medical model."""
    feedback = request.json
    avatar_name = feedback['avatar_name']
    symptoms = feedback['symptoms']
    diagnosis = feedback['diagnosis']
    
    avatar = avatar_registry.get_avatar(avatar_name)
    if isinstance(avatar, DoctorCareer):
        new_data = {'symptoms': [symptoms], 'diagnosis': [diagnosis]}
        avatar.data_source.update_medical_data(new_data)
        avatar.train_model()
        return jsonify({'message': f'{avatar_name} model updated with feedback'})
    else:
        return jsonify({'message': f'{avatar_name} is not a Doctor avatar'}), 400

@app.route('/feedback_case_classification', methods=['POST'])
def feedback_case_classification():
    """Provide feedback to update the Lawyer avatar's legal model."""
    feedback = request.json
    avatar_name = feedback['avatar_name']
    case_factors = feedback['case_factors']
    classification = feedback['classification']
    
    avatar = avatar_registry.get_avatar(avatar_name)
    if isinstance(avatar, LawyerCareer):
        new_data = {'case_factors': [case_factors], 'classification': [classification]}
        avatar.data_source.update_legal_data(new_data)
        avatar.train_model()
        return jsonify({'message': f'{avatar_name} model updated with feedback'})
    else:
        return jsonify({'message': f'{avatar_name} is not a Lawyer avatar'}), 400

if __name__ == '__main__':
    app.run(debug=True)
