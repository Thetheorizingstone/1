from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from datetime import datetime, timedelta
import math
import os
import logging

# Initialize the Flask application
app = Flask(__name__)

# Configuration settings
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URI', 'sqlite:///landowners.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'your_jwt_secret_key')

# Initialize database and JWT manager
db = SQLAlchemy(app)
jwt = JWTManager(app)

# Set up logging
logging.basicConfig(level=logging.INFO)

# Database model for Landowner
class LandownerModel(db.Model):
    """Model for Landowner."""
    id = db.Column(db.Integer, primary_key=True)
    owner_id = db.Column(db.String(80), unique=True, nullable=False)
    units_owned = db.Column(db.Integer, nullable=False)
    fully_occupied_units = db.Column(db.Integer, nullable=False)
    empty_units = db.Column(db.Integer, nullable=False)
    dependents = db.Column(db.Integer, nullable=False)
    months_vacant = db.Column(db.Integer, nullable=False)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow)

# Create the database tables
@app.before_first_request
def create_tables():
    db.create_all()

# Function to calculate taxes and penalties
def calculate_tax(units_owned, fully_occupied_units):
    k = 0.1  # Example constant for exponential growth
    tax = 100 * math.exp(k * (units_owned ** 2))
    tax_break = 0.1 * fully_occupied_units * 100
    return tax - tax_break

def calculate_empty_unit_penalty(empty_units, months_vacant):
    penalty = 0
    for unit in range(empty_units):
        if months_vacant > 1:
            penalty += 50 * (2 ** (months_vacant - 1))
    return penalty

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    owner_id = data.get('owner_id')
    # Here you would normally verify the user's credentials
    access_token = create_access_token(identity=owner_id)
    return jsonify(access_token=access_token)

@app.route('/audit', methods=['POST'])
@jwt_required()
def submit_audit():
    data = request.json
    owner_id = get_jwt_identity()

    # Validate input data
    required_fields = ['units_owned', 'fully_occupied_units', 'empty_units', 'dependents', 'months_vacant']
    for field in required_fields:
        if field not in data:
            return jsonify({'message': f'Missing field: {field}'}), 400

    units_owned = data['units_owned']
    fully_occupied_units = data['fully_occupied_units']
    empty_units = data['empty_units']
    dependents = data['dependents']
    months_vacant = data['months_vacant']

    # Update or add landowner data
    landowner = LandownerModel.query.filter_by(owner_id=owner_id).first()
    if landowner:
        landowner.units_owned = units_owned
        landowner.fully_occupied_units = fully_occupied_units
        landowner.empty_units = empty_units
        landowner.dependents = dependents
        landowner.months_vacant = months_vacant
        landowner.last_updated = datetime.utcnow()
    else:
        new_landowner = LandownerModel(owner_id=owner_id, units_owned=units_owned,
                                       fully_occupied_units=fully_occupied_units,
                                       empty_units=empty_units, dependents=dependents,
                                       months_vacant=months_vacant)
        db.session.add(new_landowner)

    db.session.commit()
    
    # Calculate total due
    total_due = calculate_tax(units_owned, fully_occupied_units) + calculate_empty_unit_penalty(empty_units, months_vacant)

    return jsonify({
        'message': 'Audit submitted successfully.',
        'total_due': total_due,
        'next_due_date': (datetime.utcnow() + timedelta(days=30)).strftime('%Y-%m-%d')
    })

@app.route('/tax_calculation', methods=['GET'])
@jwt_required()
def get_tax_calculation():
    owner_id = get_jwt_identity()
    landowner = LandownerModel.query.filter_by(owner_id=owner_id).first()
    if not landowner:
        return jsonify({'message': 'Landowner not found.'}), 404

    total_due = calculate_tax(landowner.units_owned, landowner.fully_occupied_units) + calculate_empty_unit_penalty(landowner.empty_units, landowner.months_vacant)

    return jsonify({
        'owner_id': owner_id,
        'total_due': total_due,
        'dependents': landowner.dependents,
        'last_updated': landowner.last_updated.strftime('%Y-%m-%d %H:%M:%S')
    })


@app.errorhandler(Exception)
def handle_error(e):
    """Global error handler."""
    app.logger.error(f'Error: {str(e)}')
    return jsonify({'message': 'An internal error occurred.'}), 500

if __name__ == '__main__':
    app.run(debug=True)
