pip install Flask
python app.py

{
    "owner_id": "owner123",
    "units_owned": 5,
    "fully_occupied_units": 3,
    "empty_units": 2,
    "dependents": 2,
    "months_vacant": 4
}


{
    "message": "Audit submitted successfully.",
    "total_due": <total_amount_due>,
    "next_due_date": "YYYY-MM-DD"
}



{
    "owner_id": "owner123",
    "total_due": <total_amount_due>,
    "dependents": 2,
    "last_updated": "YYYY-MM-DD HH:MM:SS"
}




from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import math

app = Flask(__name__)

# Configuration Constants
TAX_RATE_BASE = 100  # Base tax rate per unit
PENALTY_BASE = 50    # Base penalty per empty unit
COST_OF_LIVING_INDEX = 1.03  # Adjustment factor for cost of living


class Landowner:
    """Class representing a landowner and their property data."""
    
    def __init__(self, owner_id):
        self.owner_id = owner_id
        self.units_owned = 0
        self.fully_occupied_units = 0
        self.empty_units = 0
        self.dependents = 0
        self.months_vacant = 0
        self.last_updated = datetime.now()

    def update_data(self, units_owned, fully_occupied_units, empty_units, dependents, months_vacant):
        """Update landowner's property data."""
        self.units_owned = units_owned
        self.fully_occupied_units = fully_occupied_units
        self.empty_units = empty_units
        self.dependents = dependents
        self.months_vacant = months_vacant
        self.last_updated = datetime.now()

    def calculate_tax(self):
        """Calculate the total tax owed based on the landowner's property data."""
        k = 0.1  # Constant for exponential growth
        tax = TAX_RATE_BASE * math.exp(k * (self.units_owned ** 2))
        tax_break = 0.1 * self.fully_occupied_units * TAX_RATE_BASE
        total_tax = tax - tax_break
        return total_tax

    def calculate_empty_unit_penalty(self):
        """Calculate penalties for empty units."""
        penalty = 0
        for unit in range(self.empty_units):
            if self.months_vacant > 1:
                penalty += PENALTY_BASE * (2 ** (self.months_vacant - 1))
        return penalty

    def calculate_total_due(self):
        """Calculate the total amount due (tax + penalties)."""
        total_tax = self.calculate_tax()
        empty_unit_penalty = self.calculate_empty_unit_penalty()
        return total_tax + empty_unit_penalty


class LandownerRegistry:
    """Class to manage landowners and their data."""
    
    def __init__(self):
        self.landowners = {}

    def add_or_update_landowner(self, owner_id, units_owned, fully_occupied_units, empty_units, dependents, months_vacant):
        """Add a new landowner or update existing data."""
        if owner_id not in self.landowners:
            self.landowners[owner_id] = Landowner(owner_id)
        self.landowners[owner_id].update_data(units_owned, fully_occupied_units, empty_units, dependents, months_vacant)

    def get_landowner(self, owner_id):
        """Retrieve a landowner's data."""
        return self.landowners.get(owner_id, None)


# Create a registry to manage landowners
landowner_registry = LandownerRegistry()


@app.route('/audit', methods=['POST'])
def submit_audit():
    data = request.json
    owner_id = data['owner_id']
    units_owned = data['units_owned']
    fully_occupied_units = data['fully_occupied_units']
    empty_units = data['empty_units']
    dependents = data['dependents']
    months_vacant = data['months_vacant']

    # Update or add landowner data
    landowner_registry.add_or_update_landowner(owner_id, units_owned, fully_occupied_units, empty_units, dependents, months_vacant)

    # Calculate total due
    landowner = landowner_registry.get_landowner(owner_id)
    total_due = landowner.calculate_total_due()

    return jsonify({
        'message': 'Audit submitted successfully.',
        'total_due': total_due,
        'next_due_date': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
    })


@app.route('/tax_calculation/<owner_id>', methods=['GET'])
def get_tax_calculation(owner_id):
    landowner = landowner_registry.get_landowner(owner_id)
    if not landowner:
        return jsonify({'message': 'Landowner not found.'}), 404

    total_due = landowner.calculate_total_due()

    return jsonify({
        'owner_id': owner_id,
        'total_due': total_due,
        'dependents': landowner.dependents,
        'last_updated': landowner.last_updated.strftime('%Y-%m-%d %H:%M:%S')
    })


if __name__ == '__main__':
    app.run(debug=True)
